CREATE TABLE IF NOT EXISTS users (
    user_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(255),
    user_name VARCHAR(255),
    CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
    );

CREATE TABLE IF NOT EXISTS categories (
    category_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_name VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS locations (
    location_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    lat FLOAT,
    lon FLOAT
);

CREATE TABLE IF NOT EXISTS events (
    event_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    annotation VARCHAR(1000),
    category_id INT REFERENCES categories(category_id) ON DELETE CASCADE,
    confirmed_requests INT,
    views INT,
    created_on TIMESTAMP WITHOUT TIME ZONE,
    description VARCHAR(1000),
    event_date TIMESTAMP WITHOUT TIME ZONE,
    initiator_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    location_id INT REFERENCES locations(location_id) ON DELETE CASCADE,
    paid VARCHAR(255),
    participant_limit INT,
    published_on TIMESTAMP WITHOUT TIME ZONE,
    request_moderation VARCHAR(255),
    state VARCHAR(255),
    title VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS compilations (
    compilation_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pinned VARCHAR(255),
    title VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS compilations_events (
    compilation_id INT REFERENCES compilations(compilation_id) ON DELETE CASCADE,
    event_id INT REFERENCES events(event_id) ON DELETE CASCADE,
    PRIMARY KEY (compilation_id, event_id)
);

CREATE TABLE IF NOT EXISTS requests (
    request_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created TIMESTAMP WITHOUT TIME ZONE,
    status VARCHAR(250),
    event_id INT REFERENCES events(event_id) ON DELETE CASCADE,
    requester_id INT REFERENCES users(user_id) ON DELETE CASCADE
    );
CREATE TABLE IF NOT EXISTS comments (
    comment_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created TIMESTAMP WITHOUT TIME ZONE,
    event_id INT REFERENCES events(event_id) ON DELETE CASCADE,
    commentator_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    text VARCHAR(1000)
);
